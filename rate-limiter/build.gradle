import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0' apply false
    id 'io.spring.dependency-management' version '1.1.6'
    id 'maven-publish'
    id 'jacoco'
}

group = 'com.innercicle'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}

dependencies {
    // https://mvnrepository.com/artifact/org.springframework/spring-context
    implementation 'org.springframework:spring-context:6.2.1'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-configuration-processor
    implementation 'org.springframework.boot:spring-boot-starter'

    // https://mvnrepository.com/artifact/org.redisson/redisson
    implementation 'org.redisson:redisson:3.40.2'
    // https://mvnrepository.com/artifact/org.aspectj/aspectjtools
    implementation 'org.aspectj:aspectjtools:1.9.22.1'
    // https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.1.0'
    // https://mvnrepository.com/artifact/org.springframework/spring-web
    implementation 'org.springframework:spring-web:6.2.1'
    // https://mvnrepository.com/artifact/io.lettuce/lettuce-core
    implementation 'io.lettuce:lettuce-core:6.5.1.RELEASE'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.innercicle'
            artifactId = 'rate-limiter'
            version = '0.0.1'

            from components.java
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: ['**/hibernate/**', '**/*$HibernateProxy*'])
                })
        )
    }
}